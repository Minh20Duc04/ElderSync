package com.CareGenius.book.Service.ServiceImp;

import com.CareGenius.book.Dto.BookingDecision;
import com.CareGenius.book.Dto.BookingDto;
import com.CareGenius.book.Model.*;
import com.CareGenius.book.Repository.*;
import com.CareGenius.book.Service.BookingService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.DayOfWeek;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;


@Service
@RequiredArgsConstructor

public class BookingServiceImp implements BookingService {

    private final BookingRepository bookingRepository;
    private final CareGiverRepository careGiverRepository;
    private final CareSeekerRepository careSeekerRepository;
    private final NotificationRepository notificationRepository;
    private final UserRepository userRepository;
    private final JavaMailSender mailSender;
    private final MomoService momoService;

    @Value("${spring.mail.username}")
    private String fromEmail;

    @Override
    public BookingDto createBooking(User userDB, BookingDto bookingDto) {
        User seekerUserDB = userRepository.findById(userDB.getUid()).orElseThrow(); //lay lai user vi cai User trong Authentication la cua Spring Security ko phai cua JPA, khi dang nhap xong se no se mat session nen bi loi lazy load
        //1 la doi thanh Fetch.Eager, 2 la lay lai User ngay trong method
        CareGiver careGiverDB = careGiverRepository.findById(bookingDto.getCareGiverUid()).orElseThrow(() -> new IllegalArgumentException("Giver not found"));
        CareSeeker careSeekerDB = careSeekerRepository.findByUserUid(seekerUserDB.getUid());

        DayOfWeek dayOfFromDate = bookingDto.getFromDate().getDayOfWeek();
        if (!careGiverDB.getSchedule().getDayOfWeeks().contains(dayOfFromDate)) {
            throw new IllegalArgumentException("Invalid booking date ah right ?");
        }
        long countBook = bookingRepository.countByCareGiverAndFromDate(careGiverDB, bookingDto.getFromDate());
        if (countBook > 5) {
            throw new IllegalArgumentException("Today the giver's schedule is full ");
        }


        if (bookingDto.getCarelocation().equals(Carelocation.CLINIC)) {
            bookingDto.setStartTime(careGiverDB.getSchedule().getStartTime());
            bookingDto.setEndTime(careGiverDB.getSchedule().getEndTime());
        }

        Booking booking = mapToBooking(bookingDto, careGiverDB, careSeekerDB);
        bookingRepository.save(booking);

        //Tao notify cho giver
        notificationRepository.save(Notifications.builder()
                .message("B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu chƒÉm s√≥c m·ªõi t·ª´: " + userDB.getFullName())
                .type(Type.BOOKING_PENDING)
                .user(careGiverDB.getUser())
                .build());

        //Tao notify cho seeker
        notificationRepository.save(Notifications.builder()
                .message("Y√™u c·∫ßu chƒÉm s√≥c c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! Vui l√≤ng ƒë·ª£i ng∆∞·ªùi chƒÉm s√≥c x√°c nh·∫≠n.")
                .type(Type.BOOKING_PENDING)
                .user(seekerUserDB)
                .build());

        return mapToBookingDto(booking);
    }

    @Override
    public String decideBooking(User userDB, BookingDecision bookingDecision) throws Exception {
        Booking bookingDB = bookingRepository.findById(bookingDecision.getBookingId())
                .orElseThrow(() -> new IllegalArgumentException("Not found booking"));

        CareGiver careGiverDB = careGiverRepository.findByUser(userDB);
        CareSeeker careSeekerDB = careSeekerRepository.findByUser(userDB);

        // Ki·ªÉm tra quy·ªÅn
        boolean isGiver = careGiverDB != null && careGiverDB.equals(bookingDB.getCareGiver());
        boolean isSeeker = careSeekerDB != null && careSeekerDB.equals(bookingDB.getCareSeeker());

        if (!isGiver && !isSeeker) {
            throw new IllegalArgumentException("You do not have permission to update this booking");
        }

        // N·∫øu Giver confirm booking
        if (bookingDecision.getType().equals(Type.BOOKING_CONFIRMED)) {
            if (!isGiver) {
                throw new IllegalArgumentException("Only Giver can confirm the booking");
            }

            bookingDB.setMeetingLink(bookingDecision.getMeetingLink());
            bookingDB.setType(Type.BOOKING_CONFIRMED);
            bookingRepository.save(bookingDB);

            notificationRepository.save(Notifications.builder()
                    .type(Type.BOOKING_CONFIRMED)
                    .user(bookingDB.getCareSeeker().getUser()) // l·∫•y t·ª´ booking lu√¥n
                    .message("Booking c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c Giver x√°c nh·∫≠n th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v·ªÅ l·ªãch h·ªçp v√† ph∆∞∆°ng th·ª©c thanh to√°n.")
                    .build());

            sendEmail(bookingDB.getCareSeeker().getUser().getEmail(), bookingDB);

        } else if (bookingDecision.getType().equals(Type.BOOKING_CANCELED)) { //seeker v√† giver ƒë·ªÅu x√≥a ƒë∆∞·ª£c booking n·∫øu mu·ªën
            bookingRepository.delete(bookingDB);
        }

        return "Updated this booking successfully";
    }


    private Booking mapToBooking(BookingDto bookingDto, CareGiver careGiverDB, CareSeeker careSeekerDB) {
        return Booking.builder()
                .careLocation(bookingDto.getCarelocation())
                .fromDate(bookingDto.getFromDate())
                .duration(bookingDto.getDuration())
                .type(Type.BOOKING_PENDING)
                .startTime(bookingDto.getStartTime())
                .endTime(bookingDto.getEndTime())
                .careGiver(careGiverDB)
                .careSeeker(careSeekerDB)
                .note(bookingDto.getNote())
                .meetingLink("Wait till Giver confirm your request")
                .payment(bookingDto.getPayment())
                .build();
    }


    private BookingDto mapToBookingDto(Booking booking) {
        return new BookingDto(
                booking.getCareLocation(),
                booking.getFromDate(),
                booking.getDuration(),
                booking.getStartTime(),
                booking.getEndTime(),
                booking.getNote(),
                booking.getPayment(),
                booking.getCareGiver().getUid()
        );
    }

    private void sendEmail(String email, Booking booking) throws Exception {
        String momoPaymentLink = null;

        if (booking.getPayment().equals(Payment.ONLINE)) {
            momoPaymentLink = momoService.createSandboxMomoLink(booking.getId(), booking.getCareGiver().getFee().toString());
        }

        String subject = "ElderSync - X√°c nh·∫≠n booking #" + booking.getId();

        String body = String.format(
                "Xin ch√†o %s,\n\n" +
                        "Booking c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c Giver x√°c nh·∫≠n th√†nh c√¥ng!\n" +
                        "üìÖ Ng√†y: %s\n" +
                        "üïí Th·ªùi gian: %s - %s\n" +
                        "üí≥ H√¨nh th·ª©c thanh to√°n: %s\n" +
                        "üîó Link h·ªçp: %s\n\n" +
                        "Vui l√≤ng truy c·∫≠p link ƒë√∫ng gi·ªù. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ElderSync. ",
                booking.getCareSeeker().getUser().getFullName(),
                booking.getFromDate(),
                booking.getStartTime(),
                booking.getEndTime(),
                booking.getPayment() + " t·∫°i :" +((momoPaymentLink.isEmpty()) ? " " : momoPaymentLink),
                booking.getMeetingLink()
        );

        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(email);
        message.setSubject(subject);
        message.setText(body);
        message.setFrom(fromEmail);

        mailSender.send(message);
    }
}
